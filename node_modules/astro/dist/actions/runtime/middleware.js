import { defineMiddleware } from "../../core/middleware/index.js";
import { ApiContextStorage } from "./store.js";
import { formContentTypes, getAction, hasContentType } from "./utils.js";
import { callSafely } from "./virtual/shared.js";
const onRequest = defineMiddleware(async (context, next) => {
  const locals = context.locals;
  const { request, url } = context;
  const contentType = request.headers.get("Content-Type");
  if (url.pathname.startsWith("/_actions")) return nextWithLocalsStub(next, locals);
  if (!contentType || !hasContentType(contentType, formContentTypes))
    return nextWithLocalsStub(next, locals);
  const formData = await request.clone().formData();
  const actionPath = formData.get("_astroAction");
  if (typeof actionPath !== "string") return nextWithLocalsStub(next, locals);
  const actionPathKeys = actionPath.replace("/_actions/", "").split(".");
  const action = await getAction(actionPathKeys);
  if (!action) return nextWithLocalsStub(next, locals);
  const result = await ApiContextStorage.run(context, () => callSafely(() => action(formData)));
  const actionsInternal = {
    getActionResult: (actionFn) => {
      if (actionFn.toString() !== actionPath) return Promise.resolve(void 0);
      return result;
    }
  };
  Object.defineProperty(locals, "_actionsInternal", { writable: false, value: actionsInternal });
  return next();
});
function nextWithLocalsStub(next, locals) {
  Object.defineProperty(locals, "_actionsInternal", {
    writable: false,
    value: {
      getActionResult: () => void 0
    }
  });
  return next();
}
export {
  onRequest
};
